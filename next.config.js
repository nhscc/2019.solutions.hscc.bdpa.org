/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _nextTranspileModules = _interopRequireDefault(require("next-transpile-modules"));

var _bundleAnalyzer = _interopRequireDefault(require("@next/bundle-analyzer"));

var _dotenvWebpack = _interopRequireDefault(require("dotenv-webpack"));

var _devUtils = require("./src/dev-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _devUtils.populateEnv)();
const paths = {
  universe: `${__dirname}/src/`,
  multiverse: `${__dirname}/lib/`,
  components: `${__dirname}/src/components/`,
  rbc: `${__dirname}/node_modules/react-bulma-components/src/components`
};
const withTM = (0, _nextTranspileModules.default)(['react-bulma-components']);

module.exports = () => {
  return (0, _bundleAnalyzer.default)({
    enabled: process.env.ANALYZE === 'true'
  })(withTM({
    sassOptions: {
      includePaths: [require('path').join(__dirname, '/src')]
    },
    webpack: (config, {
      isServer
    }) => {
      config.resolve.alias = Object.assign({}, config.resolve.alias, {
        universe: paths.universe,
        multiverse: paths.multiverse,
        components: paths.components,
        rbc: paths.rbc
      });

      if (isServer) {
        config.plugins.push(new _dotenvWebpack.default());
      } else {
        config.node = {
          fs: 'empty'
        };
      }

      return config;
    }
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJwYXRocyIsInVuaXZlcnNlIiwiX19kaXJuYW1lIiwibXVsdGl2ZXJzZSIsImNvbXBvbmVudHMiLCJyYmMiLCJ3aXRoVE0iLCJtb2R1bGUiLCJleHBvcnRzIiwiZW5hYmxlZCIsInByb2Nlc3MiLCJlbnYiLCJBTkFMWVpFIiwic2Fzc09wdGlvbnMiLCJpbmNsdWRlUGF0aHMiLCJyZXF1aXJlIiwiam9pbiIsIndlYnBhY2siLCJjb25maWciLCJpc1NlcnZlciIsInJlc29sdmUiLCJhbGlhcyIsIk9iamVjdCIsImFzc2lnbiIsInBsdWdpbnMiLCJwdXNoIiwiRG90ZW52V2VicGFja1BsdWdpbiIsIm5vZGUiLCJmcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFFQSxNQUFNQSxLQUFLLEdBQUc7QUFDVkMsRUFBQUEsUUFBUSxFQUFHLEdBQUVDLFNBQVUsT0FEYjtBQUVWQyxFQUFBQSxVQUFVLEVBQUcsR0FBRUQsU0FBVSxPQUZmO0FBR1ZFLEVBQUFBLFVBQVUsRUFBRyxHQUFFRixTQUFVLGtCQUhmO0FBSVZHLEVBQUFBLEdBQUcsRUFBRyxHQUFFSCxTQUFVO0FBSlIsQ0FBZDtBQVFBLE1BQU1JLE1BQU0sR0FBRyxtQ0FBa0IsQ0FBQyx3QkFBRCxDQUFsQixDQUFmOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsTUFBTTtBQUNuQixTQUFPLDZCQUFtQjtBQUN0QkMsSUFBQUEsT0FBTyxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBWixLQUF3QjtBQURYLEdBQW5CLEVBRUpOLE1BQU0sQ0FBQztBQUNOTyxJQUFBQSxXQUFXLEVBQUU7QUFDVEMsTUFBQUEsWUFBWSxFQUFFLENBQUVDLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JDLElBQWhCLENBQXFCZCxTQUFyQixFQUFnQyxNQUFoQyxDQUFGO0FBREwsS0FEUDtBQVFOZSxJQUFBQSxPQUFPLEVBQUUsQ0FBQ0MsTUFBRCxFQUFpQjtBQUFFQyxNQUFBQTtBQUFGLEtBQWpCLEtBQTBDO0FBSS9DRCxNQUFBQSxNQUFNLENBQUNFLE9BQVAsQ0FBZUMsS0FBZixHQUF1QkMsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsTUFBTSxDQUFDRSxPQUFQLENBQWVDLEtBQWpDLEVBQXdDO0FBQzNEcEIsUUFBQUEsUUFBUSxFQUFFRCxLQUFLLENBQUNDLFFBRDJDO0FBRTNERSxRQUFBQSxVQUFVLEVBQUVILEtBQUssQ0FBQ0csVUFGeUM7QUFHM0RDLFFBQUFBLFVBQVUsRUFBRUosS0FBSyxDQUFDSSxVQUh5QztBQUkzREMsUUFBQUEsR0FBRyxFQUFFTCxLQUFLLENBQUNLO0FBSmdELE9BQXhDLENBQXZCOztBQU9BLFVBQUdjLFFBQUgsRUFBYTtBQUVURCxRQUFBQSxNQUFNLENBQUNNLE9BQVAsQ0FBZUMsSUFBZixDQUFvQixJQUFJQyxzQkFBSixFQUFwQjtBQUNILE9BSEQsTUFLSztBQUdEUixRQUFBQSxNQUFNLENBQUNTLElBQVAsR0FBYztBQUNaQyxVQUFBQSxFQUFFLEVBQUU7QUFEUSxTQUFkO0FBR0g7O0FBRUQsYUFBT1YsTUFBUDtBQUNIO0FBakNLLEdBQUQsQ0FGRixDQUFQO0FBcUNILENBdENEIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHdpdGhUTUluaXRpYWxpemVyIGZyb20gJ25leHQtdHJhbnNwaWxlLW1vZHVsZXMnXG5pbXBvcnQgd2l0aEJ1bmRsZUFuYWx5emVyIGZyb20gJ0BuZXh0L2J1bmRsZS1hbmFseXplcidcbmltcG9ydCBEb3RlbnZXZWJwYWNrUGx1Z2luIGZyb20gJ2RvdGVudi13ZWJwYWNrJ1xuaW1wb3J0IHsgcG9wdWxhdGVFbnYgfSBmcm9tICcuL3NyYy9kZXYtdXRpbHMnXG5cbnBvcHVsYXRlRW52KCk7XG5cbmNvbnN0IHBhdGhzID0ge1xuICAgIHVuaXZlcnNlOiBgJHtfX2Rpcm5hbWV9L3NyYy9gLFxuICAgIG11bHRpdmVyc2U6IGAke19fZGlybmFtZX0vbGliL2AsXG4gICAgY29tcG9uZW50czogYCR7X19kaXJuYW1lfS9zcmMvY29tcG9uZW50cy9gLFxuICAgIHJiYzogYCR7X19kaXJuYW1lfS9ub2RlX21vZHVsZXMvcmVhY3QtYnVsbWEtY29tcG9uZW50cy9zcmMvY29tcG9uZW50c2Bcbn07XG5cbi8vID8gTWFrZSBCdWxtYSB3b3JrIChpdCBuZWVkcyB0byBiZSB0cmFuc3BpbGVkKVxuY29uc3Qgd2l0aFRNID0gd2l0aFRNSW5pdGlhbGl6ZXIoWydyZWFjdC1idWxtYS1jb21wb25lbnRzJ10pO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gd2l0aEJ1bmRsZUFuYWx5emVyKHtcbiAgICAgICAgZW5hYmxlZDogcHJvY2Vzcy5lbnYuQU5BTFlaRSA9PT0gJ3RydWUnXG4gICAgfSkod2l0aFRNKHtcbiAgICAgICAgc2Fzc09wdGlvbnM6IHtcbiAgICAgICAgICAgIGluY2x1ZGVQYXRoczogWyByZXF1aXJlKCdwYXRoJykuam9pbihfX2Rpcm5hbWUsICcvc3JjJykgXVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vID8gV2VicGFjayBjb25maWd1cmF0aW9uXG4gICAgICAgIC8vICEgTm90ZSB0aGF0IHRoZSB3ZWJwYWNrIGNvbmZpZ3VyYXRpb24gaXMgZXhlY3V0ZWQgdHdpY2U6IG9uY2VcbiAgICAgICAgLy8gISBzZXJ2ZXItc2lkZSBhbmQgb25jZSBjbGllbnQtc2lkZSFcbiAgICAgICAgd2VicGFjazogKGNvbmZpZzogT2JqZWN0LCB7IGlzU2VydmVyIH06IE9iamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gPyBUaGVzZSBhcmUgYWxpYXNlcyB0aGF0IGNhbiBiZSB1c2VkIGR1cmluZyBKUyBpbXBvcnQgY2FsbHNcbiAgICAgICAgICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiAuZmxvd2NvbmZpZ1xuICAgICAgICAgICAgLy8gISBOb3RlIHRoYXQgeW91IG11c3QgYWxzbyBjaGFuZ2UgdGhlc2Ugc2FtZSBhbGlhc2VzIGluIHBhY2thZ2UuanNvbiAoamVzdClcbiAgICAgICAgICAgIGNvbmZpZy5yZXNvbHZlLmFsaWFzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLnJlc29sdmUuYWxpYXMsIHtcbiAgICAgICAgICAgICAgICB1bml2ZXJzZTogcGF0aHMudW5pdmVyc2UsXG4gICAgICAgICAgICAgICAgbXVsdGl2ZXJzZTogcGF0aHMubXVsdGl2ZXJzZSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBwYXRocy5jb21wb25lbnRzLFxuICAgICAgICAgICAgICAgIHJiYzogcGF0aHMucmJjLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmKGlzU2VydmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gPyBBZGQgcmVmZXJlbmNlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZGVmaW5lZCBpbiAuZW52IHRvIGJ1bmRsZVxuICAgICAgICAgICAgICAgIGNvbmZpZy5wbHVnaW5zLnB1c2gobmV3IERvdGVudldlYnBhY2tQbHVnaW4oKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vID8gU3RvcHMgTmV4dCBmcm9tIHRocm93aW5nIGEgdGFudHJ1bSBvdmVyIHNlcnZlci1zaWRlXG4gICAgICAgICAgICAgICAgLy8gPyBtb2R1bGVzIGRlcGVuZGluZyBvbiBub2RlJ3MgYGZzYCBidWlsdGluXG4gICAgICAgICAgICAgICAgY29uZmlnLm5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICBmczogJ2VtcHR5J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuICAgIH0pKTtcbn07XG4iXX0=